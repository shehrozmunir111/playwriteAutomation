PLAYWRIGHT AUTOMATION TESTING INTERVIEW QUESTIONS AND ANSWERS

1. Q: What is Playwright and what are its key features?
A: Playwright is a modern automation testing framework developed by Microsoft that enables reliable end-to-end testing for web applications. Key features include:
   - Cross-browser support (Chromium, Firefox, WebKit)
   - Auto-wait capabilities
   - Built-in test runner and assertions
   - Network interception
   - Mobile emulation
   - Parallel test execution
   - Built-in reporting

2. Q: How do you install Playwright in a new project?
A: There are two main ways:
   1. Using NPM init:
      ```bash
      npm init playwright@latest
      ```
   2. Manual installation:
      ```bash
      npm install --save-dev playwright
      npx playwright install
      ```

3. Q: What are the different ways to locate elements in Playwright?
A: Based on our project, we use several locator strategies:
   - Property locators: page.locator('#login2')
   - CSS locators: page.locator('.header-logo')
   - XPath locators: page.locator("//div[@id='tbodyid']//h4/a")
   - Built-in locators:
     * getByRole()
     * getByText()
     * getByPlaceholder()
     * getByAltText()
     * getByLabel()
     * getByTitle()
     * getByTestId()

4. Q: How do you handle different types of assertions in Playwright?
A: Our project demonstrates two types of assertions:
   1. Hard Assertions:
      ```javascript
      await expect(page).toHaveTitle('STORE');
      await expect(page).toHaveURL('https://demoblaze.com/index.html');
      ```
   2. Soft Assertions:
      ```javascript
      await expect.soft(page).toHaveTitle('STORE123');
      ```

5. Q: How do you handle dropdowns in Playwright?
A: Based on our Dropdowns.spec.js, there are multiple ways:
   ```javascript
   // By value
   await page.selectOption('#country', 'Germany');
   // By label
   await page.selectOption('#country', {label: 'Germany'});
   // By index
   await page.selectOption('#country', {index: 3});
   ```

6. Q: How do you handle checkboxes and radio buttons in Playwright?
A: From our project examples:
   ```javascript
   // Checkbox
   await page.locator('#checkbox').check();
   await page.locator('#checkbox').uncheck();
   
   // Radio button
   await page.locator('#male').check();
   await expect(page.locator('#male')).toBeChecked();
   ```

7. Q: How do you run tests in different browsers using Playwright?
A: Our project configuration shows:
   ```bash
   # Run in Chromium
   npx playwright test --project=chromium
   
   # Run in Firefox
   npx playwright test --project=firefox
   
   # Run in WebKit
   npx playwright test --project=webkit
   ```

8. Q: How do you handle multiple elements in Playwright?
A: From LocatingMultipleElements.spec.js:
   ```javascript
   const links = await page.$$('a');
   for (const link of links) {
       console.log(await link.textContent());
   }
   ```

9. Q: What is the difference between page.locator() and page.$() in Playwright?
A: - page.locator() is the recommended modern way to locate elements
   - page.$() is the older jQuery-style selector which returns the first matching element
   - page.locator() has better built-in auto-waiting mechanisms

10. Q: How do you handle test reports in Playwright?
A: Our project uses HTML reporter configured in playwright.config.js:
    ```javascript
    reporter: 'html'
    ```
    To view reports:
    ```bash
    npx playwright show-report
    ```

11. Q: How do you handle test retries in Playwright?
A: From our playwright.config.js:
    ```javascript
    retries: process.env.CI ? 2 : 0,
    ```
    This configures 2 retries in CI environment and 0 in local.

12. Q: How do you run tests in parallel in Playwright?
A: Our config shows:
    ```javascript
    fullyParallel: true,
    workers: process.env.CI ? 1 : undefined,
    ```
    This enables parallel execution locally while running sequentially in CI.

13. Q: How do you debug tests in Playwright?
A: Our project supports several debugging methods:
    ```bash
    # Debug mode
    npx playwright test --debug
    
    # Headed mode
    npx playwright test --headed
    
    # Both
    npx playwright test --headed --debug
    ```

14. Q: What is the purpose of test.beforeEach() in Playwright?
A: It's used to set up test prerequisites that should run before each test case. Example from our project:
    ```javascript
    test.beforeEach(async ({ page }) => {
        await page.goto('https://demo.playwright.dev/todomvc');
    });
    ```

15. Q: How do you handle iframes in Playwright?
A: While not shown in our current project, you can handle iframes using:
    ```javascript
    const frame = page.frameLocator('#iframe-id');
    await frame.locator('.some-element').click();
    ```

16. Q: How do you implement Page Object Model (POM) in Playwright?
A: From our POM.spec.js and pages/ directory:
    ```javascript
    // LoginPage.js
    export class LoginPage {
        constructor(page) {
            this.page = page;
            this.loginLink = "#login2";
            this.usernameInput = "#loginusername";
            this.passwordInput = "#loginpassword";
            this.loginButton = '//button[normalize-space()="Log in"]';
        }
        async login(username, password) {
            await this.page.locator(this.loginLink).click();
            await this.page.locator(this.usernameInput).fill(username);
            await this.page.locator(this.passwordInput).fill(password);
            await this.page.locator(this.loginButton).click();
        }
    }
    ```

17. Q: How do you handle multiple windows/pages in Playwright?
A: From our HandlingWindows.spec.js:
    ```javascript
    const browser = await chromium.launch()
    const context = await browser.newContext()

    const page1 = await context.newPage()
    const page2 = await context.newPage()

    const allPages = context.pages()
    console.log("No of Pages created:", allPages.length)
    ```

18. Q: How do you handle screenshots in Playwright?
A: From our Screenshot.spec.js:
    ```javascript
    await page.screenshot({ 
        path: 'tests/screenshots/' + Date.now() + 'HomePage.png' 
    });
    ```

19. Q: How do you handle video recording in Playwright?
A: Configure in playwright.config.js and use in VideoRecording.spec.js:
    ```javascript
    // In config
    use: {
        video: 'on-first-retry'
    }
    
    // In test
    test('Video Recording', async ({ page }) => {
        // Test actions will be recorded automatically
    });
    ```

20. Q: How do you handle tracing in Playwright?
A: From our Tracing.spec.js:
    ```javascript
    // Configure in playwright.config.js
    use: {
        trace: 'on-first-retry'
    }
    
    // View trace
    npx playwright show-trace test-results/trace.zip
    ```

21. Q: How do you handle test hooks in Playwright?
A: From our Hooks.spec.js:
    ```javascript
    test.beforeAll(async ({ browser }) => {
        const context = await browser.newContext();
        page = await context.newPage();
        await page.goto('https://demoblaze.com/index.html');
        // Login setup
    });
    ```

22. Q: How do you handle test reporting in Playwright?
A: From our Reporters.spec.js and configuration:
    ```javascript
    // In playwright.config.js
    reporter: [
        ['html'],
        ['list']
    ]
    
    // Run tests and generate report
    npx playwright test
    npx playwright show-report
    ```

23. Q: How do you handle test tags in Playwright?
A: From our Tags.spec.js:
    ```javascript
    test('Test1@sanity', async ({ page }) => {
        // Test code
    });
    
    // Run with tags
    npx playwright test --grep "@sanity"
    npx playwright test --grep-invert "@regression"
    ```

24. Q: How do you handle test annotations in Playwright?
A: From our Annotations.spec.js:
    ```javascript
    test.skip('Test2', async ({ page }) => {
        // This test will be skipped
    });
    
    test.fixme('Test4', async ({ page }) => {
        // This test needs fixing
    });
    ```

25. Q: How do you handle keyboard actions in Playwright?
A: From our KeyboardActions.spec.js:
    ```javascript
    await page.keyboard.type('Hello World!');
    await page.keyboard.press('Control+A');
    await page.keyboard.press('Control+C');
    await page.keyboard.down('Tab');
    await page.keyboard.up('Tab');
    ```

Note: These questions and answers are based on the actual implementation in this project and reflect real-world usage of Playwright for automation testing. 