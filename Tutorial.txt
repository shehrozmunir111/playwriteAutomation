1. Install Nodejs from https://nodejs.org/en/download/
2. Create a new folder and open it in VS Code/Cursor  
3. Open the terminal in VS Code/Cursor by pressing Ctrl+`
4. Install playwright "npm init playwright@latest"
6. if you clone this repository, you can do these steps:

- Run the command: Set-ExecutionPolicy -Scope LocalMachine -ExecutionPolicy RemoteSigned (if you get an error about the execution policy)
- Run the command: npm install --save-dev playwright (if you don't have node_modules folder)
- Run the command: npx playwright install (if you don't have the browsers installed)

5. Run the command: npx playwright test
5. Run the command: npx playwright test --headed
6. Run the command: npx playwright show-report

-----Create a new file-----
1. Create a new file called "HomePageTest.spec.js"
2. Verify this website https://demoblaze.com/index.html
3. Run the command: npx playwright test HomePageTest.spec.js --project=chromium
4. Run the command: npx playwright test HomePageTest.spec.js --project=chromium --headed
5. Run the command: npx playwright test HomePageTest.spec.js --project=chromium --headed --debug
5. Run the command: npx playwright show-report

-----Locating Web Elements | Locators-Property, XPath, CSS-----
1. Create a new file called "Locators.spec.js"
2. Verify this website https://demoblaze.com/index.html
3. Run the command: npx playwright test Locators.spec.js --project=chromium
4. Run the command: npx playwright test Locators.spec.js --project=chromium --headed
5. Run the command: npx playwright test Locators.spec.js --project=chromium --headed --debug
5. Run the command: npx playwright show-report

-----Locating Multiple Elements-----
1. Create a new file called "LocatingMultipleElements.spec.js"
2. Verify this website https://demoblaze.com/index.html
3. Run the command: npx playwright test LocatingMultipleElements.spec.js --project=chromium
4. Run the command: npx playwright test LocatingMultipleElements.spec.js --project=chromium --headed
5. Run the command: npx playwright test LocatingMultipleElements.spec.js --project=chromium --headed --debug
5. Run the command: npx playwright show-report

-----Playwright Locators (https://playwright.dev/docs/locators)-----
1. Create a new file called "Locators_builtin.spec.js"
2. Verify this website https://demoblaze.com/index.html
3. Run the command: npx playwright test Locators_builtin.spec.js --project=chromium
4. Run the command: npx playwright test Locators_builtin.spec.js --project=chromium --headed
5. Run the command: npx playwright test Locators_builtin.spec.js --project=chromium --headed --debug
5. Run the command: npx playwright show-report

-----Record & Play Scripts In Playwright |Test Generator| Codegen by (https://playwright.dev/docs/codegen)-----
1. Run the command: npx playwright codegen https://demoblaze.com/index.html
2. To generate the automatically file, run the command: npx playwright codegen https://demoblaze.com/index.html -o tests/Codegen.spec.js
3. It will open a new browser window and record the actions
4. Click on Record button and perform the actions
5. Click on Stop button to stop the recording

-----Assertions (https://playwright.dev/docs/test-assertions) : Hard Assertions-----
1. Create a new file called "Assertions.spec.js"
2. Verify this website https://demo.nopcommerce.com/register
3. Run the command: npx playwright test Assertions.spec.js --project=chromium
4. Run the command: npx playwright test Assertions.spec.js --project=chromium --headed
5. Run the command: npx playwright test Assertions.spec.js --project=chromium --headed --debug
5. Run the command: npx playwright show-report

-----Assertions (https://playwright.dev/docs/test-assertions) : Soft Assertions-----
1. Create a new file called "Assertions_soft.spec.js"
2. Verify this website https://demoblaze.com/index.html
3. Run the command: npx playwright test Assertions_soft.spec.js --project=chromium
4. Run the command: npx playwright test Assertions_soft.spec.js --project=chromium --headed
5. Run the command: npx playwright test Assertions_soft.spec.js --project=chromium --headed --debug
6. Run the command: npx playwright show-report

-----Actions | Input Box | Radio Button-----
1. Create a new file called "InputBox_RadioButton.spec.js"
2. Verify this website https://testautomationpractice.blogspot.com/
3. Run the command: npx playwright test InputBox_RadioButton.spec.js --project=chromium
4. Run the command: npx playwright test InputBox_RadioButton.spec.js --project=chromium --headed
5. Run the command: npx playwright test InputBox_RadioButton.spec.js --project=chromium --headed --debug
6. Run the command: npx playwright show-report

-----Actions | Checkboxs-----
1. Create a new file called "Checkboxs.spec.js"
2. Verify this website https://testautomationpractice.blogspot.com/
3. Run the command: npx playwright test Checkboxs.spec.js --project=chromium
4. Run the command: npx playwright test Checkboxs.spec.js --project=chromium --headed
5. Run the command: npx playwright test Checkboxs.spec.js --project=chromium --headed --debug
6. Run the command: npx playwright show-report

-----Actions | Dropdowns-----
1. Create a new file called "Dropdowns.spec.js"
2. Verify this website https://testautomationpractice.blogspot.com/
3. Run the command: npx playwright test Dropdowns.spec.js --project=chromium
4. Run the command: npx playwright test Dropdowns.spec.js --project=chromium --headed
5. Run the command: npx playwright test Dropdown.spec.js --project=chromium --headed --debug
6. Run the command: npx playwright show-report

-----Actions | Multi Select Dropdown-----
1. Create a new file called "MultiSelectDropdown.spec.js"
2. Verify this website https://testautomationpractice.blogspot.com/
3. Run the command: npx playwright test MultiSelectDropdown.spec.js --project=chromium
4. Run the command: npx playwright test MultiSelectDropdown.spec.js --project=chromium --headed
5. Run the command: npx playwright test MultiSelectDropdown.spec.js --project=chromium --headed --debug
6. Run the command: npx playwright show-report

-----Auto Suggestive / Auto Complete Dropdown-----
1. Create a new file called "AutoSuggestDropdown.spec.js"
2. Verify this website https://www.redbus.in/
3. Run the command: npx playwright test AutoSuggestDropdown.spec.js --project=chromium
4. Run the command: npx playwright test AutoSuggestDropdown.spec.js --project=chromium --headed
5. Run the command: npx playwright test AutoSuggest.spec.js --project=chromium --headed --debug
6. Run the command: npx playwright show-report

-----Hidden Dropdown-----
1. Create a new file called "HiddenDropdown.spec.js"
2. Verify this website https://opensource-demo.orangehrmlive.com/web/index.php/auth/login
3. Run the command: npx playwright test HiddenDropdown.spec.js --project=chromium
4. Run the command: npx playwright test HiddenDropdown.spec.js --project=chromium --headed
5. Run the command: npx playwright test HiddenDropdown.spec.js --project=chromium --headed --debug
6. Run the command: npx playwright show-report

-----Alert Handling-----
1. Create a new file called "AlertHandling.spec.js"
2. Verify this website https://testautomationpractice.blogspot.com/
3. Run the command: npx playwright test AlertHandling.spec.js --project=chromium
4. Run the command: npx playwright test AlertHandling.spec.js --project=chromium --headed
5. Run the command: npx playwright test AlertHandling.spec.js --project=chromium --headed --debug
6. Run the command: npx playwright show-report

-----frame/iframe-----
1. Create a new file called "HandleFrames.spec.js"
2. Verify this website https://ui.vision/demo/webtest/frames/
3. Run the command: npx playwright test HandleFrames.spec.js --project=chromium
4. Run the command: npx playwright test HandleFrames.spec.js --project=chromium --headed
5. Run the command: npx playwright test HandleFrames.spec.js --project=chromium --headed --debug
6. Run the command: npx playwright show-report

-----WebTable/Pagination-----
1. Create a new file called "WebTable.spec.js"
2. Verify this website https://testautomationpractice.blogspot.com/
3. Run the command: npx playwright test WebTable.spec.js --project=chromium
4. Run the command: npx playwright test WebTable.spec.js --project=chromium --headed
5. Run the command: npx playwright test WebTable.spec.js --project=chromium --headed --debug
6. Run the command: npx playwright show-report

-----Date Picker-----
1. Create a new file called "DatePicker.spec.js"
2. Verify this website https://testautomationpractice.blogspot.com/
3. Run the command: npx playwright test DatePicker.spec.js --project=chromium
4. Run the command: npx playwright test DatePicker.spec.js --project=chromium --headed
5. Run the command: npx playwright test DatePicker.spec.js --project=chromium --headed --debug
6. Run the command: npx playwright show-report

-----Mouse Actions-----
1. Create a new file called "MouseActions.spec.js"
2. Verify this website https://testautomationpractice.blogspot.com/
3. Run the command: npx playwright test MouseActions.spec.js --project=chromium
4. Run the command: npx playwright test MouseActions.spec.js --project=chromium --headed
5. Run the command: npx playwright test MouseActions.spec.js --project=chromium --headed --debug
6. Run the command: npx playwright show-report

-----Keyboard Actions-----
1. Create a new file called "KeyboardActions.spec.js"
2. Verify this website https://testautomationpractice.blogspot.com/
3. Run the command: npx playwright test KeyboardActions.spec.js --project=chromium
4. Run the command: npx playwright test KeyboardActions.spec.js --project=chromium --headed
5. Run the command: npx playwright test KeyboardActions.spec.js --project=chromium --headed --debug
6. Run the command: npx playwright show-report

-----File Upload-----
1. Create a new file called "FilesUpload.spec.js"
2. Verify this website https://testautomationpractice.blogspot.com/
3. Run the command: npx playwright test FilesUpload.spec.js --project=chromium
4. Run the command: npx playwright test FilesUpload.spec.js --project=chromium --headed
5. Run the command: npx playwright test FilesUpload.spec.js --project=chromium --headed --debug
6. Run the command: npx playwright show-report

-----Hooks-----
1. Create a new file called "Hooks.spec.js"
2. Verify this website https://demoblaze.com/index.html
3. Run the command: npx playwright test Hooks.spec.js --project=chromium
4. Run the command: npx playwright test Hooks.spec.js --project=chromium --headed
5. Run the command: npx playwright test Hooks.spec.js --project=chromium --headed --debug
6. Run the command: npx playwright show-report

-----Grouping Tests - Describe Block-----
1. Create a new file called "Grouping.spec.js"
2. Run the command: npx playwright test Grouping.spec.js --project=chromium
3. Run the command: npx playwright test Grouping.spec.js --project=chromium --headed
4. Run the command: npx playwright test Grouping.spec.js --project=chromium --headed --debug
5. Run the command: npx playwright show-report

-----Screenshot-----
1. Create a new file called "Screenshot.spec.js"
2. Verify this website https://demoblaze.com/index.html
3. Run the command: npx playwright test Screenshot.spec.js --project=chromium
4. Run the command: npx playwright test Screenshot.spec.js --project=chromium --headed
5. Run the command: npx playwright test Screenshot.spec.js --project=chromium --headed --debug
6. Run the command: npx playwright show-report

-----Video Recording-----
1. Create a new file called "VideoRecording.spec.js"
2. Verify this website https://demoblaze.com/index.html
3. Run the command: npx playwright test VideoRecording.spec.js --project=chromium
4. Run the command: npx playwright test VideoRecording.spec.js --project=chromium --headed
5. Run the command: npx playwright test VideoRecording.spec.js --project=chromium --headed --debug
6. Run the command: npx playwright show-report

-----Tracing-----
1. Create a new file called "Tracing.spec.js"
2. Verify this website https://demoblaze.com/index.html
3. Run the command: npx playwright test Tracing.spec.js --project=chromium
4. Run the command: npx playwright test Tracing.spec.js --project=chromium --headed
5. Run the command: npx playwright test Tracing.spec.js --project=chromium --headed --debug
6. Run the command: npx playwright show-report

-----Tags-----
1. Create a new file called "Tags.spec.js"
3. Run the command: npx playwright test Tags.spec.js --project=chromium
4. Run the command: npx playwright test Tags.spec.js --project=chromium --headed
5. Run the command: npx playwright test Tags.spec.js --project=chromium --headed --debug
6. Run the command: npx playwright test Tags.spec.js --project=chromium --grep "@sanity"
7. Run the command: npx playwright test Tags.spec.js --project=chromium --grep-invert "@sanity"
8. Run the command: npx playwright test Tags.spec.js --project=chromium --grep "@sanity@regression"
9. Run the command: npx playwright test Tags.spec.js --project=chromium --grep-invert "@sanity@regression"
10. Run the command: npx playwright test Tags.spec.js --project=chromium --grep "@sanity" --grep-invert "@regression"
11. Run the command: npx playwright test Tags.spec.js --project=chromium --grep "@regression" --grep-invert "@sanity"
12. Run the command: npx playwright show-report

-----Annotations-----
1. Create a new file called "Annotations.spec.js"
2. Run the command: npx playwright test Annotations.spec.js --project=chromium
3. Run the command: npx playwright test Annotations.spec.js --project=chromium --headed
4. Run the command: npx playwright test Annotations.spec.js --project=chromium --headed --debug
5. Run the command: npx playwright show-report

-----Multiple Pages/Windows-----
1. Create a new file called "HandlingWindows.spec.js"
2. Run the command: npx playwright test HandlingWindows.spec.js --project=chromium
3. Run the command: npx playwright test HandlingWindows.spec.js --project=chromium --headed
4. Run the command: npx playwright test HandlingWindows.spec.js --project=chromium --headed --debug
5. Run the command: npx playwright show-report

-----Reporters | List, Dot, Json, JUnit and HTML-----
1. Create a new file called "Reporters.spec.js"
2. Verify this website https://demoblaze.com/index.html
3. Run the command: npx playwright test Reporters.spec.js --project=chromium
4. Run the command: npx playwright test Reporters.spec.js --project=chromium --headed
5. Run the command: npx playwright test Reporters.spec.js --project=chromium --headed --debug
6. Run the command: npx playwright show-report

-----Allure Reports------

1) Installation of "allure-playwright" module
npm i -D @playwright/test allure-playwright

2) Installing Allure command line
   Ref: https://www.npmjs.com/package/allure-commandline

   npm install -g allure-commandline --save-dev
   (or)
   sudo npm install -g allure-commandline --save-dev

3) playwright.config.js
   reporter: [['allure-playwright', {outputFolder: 'Alure-Reports'}]],
   (or)
   npx playwright test --reporter=allure-playwright

4) Run the tests
   npx playwright test tests/Reporters.spec.js

5) Open Allure Report:
   allure serve allure-results

-----Retries and Test Flakiness------

1) Passed - No retry
2) Failed - Retry - Failed
3) Failed - Retry - Passed   // Fleky tests

# Give failing tests 3 retry attempts
  npx playwright test RetryTest.spec.js --project=chromium --headed --retries=3

-----API Test------
1. See the file APITests.spec.js

# I have created a new file for 'Add token to local storage' called APITesing_TokenStorage.spec.js




1. Bypass the login page and directly go to the client page
   use request.newContext for creating a new context
   use post method to send the login request, in which we have to pass the url, email and password
   use expect(loginResponse.ok()).toBeTruthy(); to check if the login is successful
   use loginResponseJson.token to store the token
   use page.addInitScript to add the token to the local storage
   await page.addInitScript(value => {
        window.localStorage.setItem('token', value);
    }, token);
   use page.goto to navigate to the client page

2. Verify the order history
   Create order with the token
    const orderResponse = await apiContext.post('/api/ecom/order/create-order', {
        data: orderPayload,
        headers: {
            'Authorization': token,
            'Content-Type': 'application/json'
        }
    });
   verify the order id is present in the response
    const orderResponseJson = await orderResponse.json();
    console.log(orderResponseJson);
    
    // Get the order ID from the response
    orderId = orderResponseJson.orders?.[0] || orderResponseJson.orderId;
    if (!orderId) {
        throw new Error('Failed to retrieve order ID from response');
    }
    console.log(orderId);

# I have created a new file for 'Session Storage State' called APITesting_SessionStorage.spec.js
1. Login to the application through UI and save authentication state
2. Reuse stored session state for subsequent tests
3. Key features:
   - Uses browser.newContext() with storageState
   - Saves login state to state.json file
   - Reuses authenticated state across multiple tests
   - Demonstrates cart operations and order verification

-----Upload and Download File------
1. Create a new file called "upload-download.spec.js"
2. Install required dependencies:
   ```bash
   npm install exceljs
   ```
3. Verify this website https://rahulshettyacademy.com/upload-download-test/index.html
4. Features demonstrated:
   - Excel file download handling
   - ExcelJS for reading and modifying Excel files
   - File upload handling
   - Dynamic table content verification
   - Row and cell locators with complex selectors
5. Run commands:
   ```bash
   npx playwright test upload-download.spec.js --project=chromium
   npx playwright test upload-download.spec.js --project=chromium --headed
   npx playwright test upload-download.spec.js --project=chromium --headed --debug
   npx playwright show-report
   ```
6. Key concepts covered:
   - File download event handling
   - Excel file manipulation
   - File system operations
   - Dynamic table data verification
   - Complex DOM element location strategies

-----Data-Driven Testing Approaches------
1. JSON Data-Driven Testing (datadrivenfromjson.spec.js):
   - Create JSON file (e.g., placeOrderData.json) with test data
   - Implement test using data loop:
     ```javascript
     const dataSet = require('../utils/placeOrderData.json');
     for(const data of dataSet) {
       test(`Test ${data.productName}`, async ({page}) => {
         // Use data.username, data.password, etc.
       });
     }
     ```
   - Run with: npx playwright test datadriven.spec.js --project=chromium

2. Fixture-Based Testing (datadrivenfromfixture.spec.js):
   - Create test-base.js with custom fixtures:
     ```javascript
     exports.customTest = base.test.extend({
       testDataForOrder: {
         username: "test@example.com",
         password: "test123",
         productName: "TEST PRODUCT"
       }
     });
     ```
   - Implement test using fixtures:
     ```javascript
     customTest(`Test $testDataForOrder.productName`, async ({page, testDataForOrder}) => {
       // Use testDataForOrder.username, etc.
     });
     ```
   - Run with: npx playwright test datadrivenfromfixture.spec.js --project=chromium

Key Differences:
- Use JSON approach for multiple data variations
- Use Fixtures for environment-specific configurations
- Combine both for complex test scenarios

How to create custom scripts to trigger the test from package.json

1. Create a new file called "custom-script.js"
2. Add the following code in package.json
"scripts": {
    "reggression": "npx playwright test Tags.spec.js --project=chromium --grep \"@regression\"",
    "sanity": "npx playwright test Tags.spec.js --project=chromium --grep \"@sanity\"",
    "html": "npx playwright test Reporters.spec.js --project=chromium --reporter=html",
    "junit": "npx playwright test Reporters.spec.js --project=chromium --reporter=junit",
    "json": "npx playwright test Reporters.spec.js --project=chromium --reporter=json"
  },

3. Run the command: npm run sanity
4. Run the command: npm run reggression
5. Run the command: npm run html
6. Run the command: npm run junit
7. Run the command: npm run json

-----Install Jankins & Configure-----
1. Install Jankins in your machine
   go to https://jenkins.io/download/
   download the 'Genaric Java Package (.war)'
   open the terminal and go to the folder where you have downloaded the jenkins.war file
   run the command: java -jar jenkins.war --httpPort=9090
   if you get error like this:
   {
      C:\Users\Shehroz\Downloads>java -jar jenkins.war -httpPort=9090
      Running with Java 23 from C:\Program Files\Java\jdk-23, which is not yet fully supported.
      Run the command again with the --enable-future-java flag to enable preview support for future Java versions.
      Supported Java versions are: [17, 21]
      See https://jenkins.io/redirect/java-support/ for more information.
   }
   then run the command: java -jar jenkins.war --enable-future-java --httpPort=9090
2. open the browser and go to http://localhost:9090/
3. unlock jenkins by giving the password that is present in the terminal
4. install suggested plugins
5. create first admin user (username: admin, password: admin)
6. click on 'New Item'
7. give the name of the project (e.g. 'PlaywrightFramework')
8. select 'Freestyle project'
9. click on 'OK'
10. scroll down and Advanced and select Custom Workspace 
11. and give the path of the project (e.g. 'C:\Users\Shehroz\Desktop\PlaywrightFramework')
12. click on 'Add build step' as 'Execute Windows Batch Command' (if you are using mac then select 'Execute Shell')
13. add the command: npm run sanity
14. click on 'Save'
15. click on 'Build Now', it will run the test and you can see the output in the terminal
16. go to 'Configure'
17. select 'This project is parameterized'
18. click on 'Choice Parameter'
19. give the name of the parameter (e.g. "$Script" - for mac and npm run %SCRIPT_CHOICE% - for windows)
20. click on 'Add Choice'
21. add the choice (e.g. 'sanity', 'regression') that is written in the package.json
22. scroll down and give the name of the parameter (e.g. npm run %SCRIPT_CHOICE%) in the build step command that is written in the 'Execute Windows Batch Command'
23. click on 'Save'
24. click on 'Build with Parameters'
25. select the choice (e.g. 'sanity', 'regression') 
26. click on 'Build'
27. click on 'Console Output' to see the output in the terminal


-----Cucumber with Playwright (https://github.com/cucumber/cucumber-js)-----
1. Install the required dependencies:
2. Run the command: npm install @cucumber/cucumber
3. Install 'Cucumber (Gherkin) Full Support' from the marketplace
4. Create a new folder called 'features'
5. Create a new file called 'Ecommerce.feature' inside the features folder
   ---- Naming convention meanings are as follows:----
   Feature means the main thing we are testing
   Scenario means the scenario we are testing
   Given means the pre-condition
   When means the action
   Then means the expected result
   And means the additional information
   But means the unexpected result
   * means the wildcard

6. run the command to generate step-definitions: npx cucumber-js
7. Create a new folder called 'step_definitions'
8. Create a new file called 'EcommerceSteps.js' inside the step_definitions folder
9. creat a new folder called 'support'
10. create a new file called 'hooks.js' inside the support folder